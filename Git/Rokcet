A large package can hold five items, while the small package can hold only one item. The available number of both large and small packages is limited. All items must be placed in packages and used packages have to be filled up completely.

Write a function that calculates the minimum number of packages needed to hold a given number of items. If it's not possible to meet the requirements, return -1.
For example, if we have 16 items, 2 large and 10 small packages, the function should return 8 (2 large packages + 6 small packages).
Starting code


public class Shipping {
    public static int minimalNumberOfPackages(int items, int availableLargePackages, int availableSmallPackages) {
		
		int remaining = 0;
		if (availableLargePackages != 0 ) {
		
		//if(items == total) 
		for (i to availableLargePackages) {
			if(item < 5) {
				break;
			}
			total += 5;
			count ++;
			remaining = items - total;
			if(remaining < 5) {
			
				break;
			}
		}	
			
		}
		if (availableSmallPackages != 0 && remaining > availableSmallPackages) {
			int small = availableSmallPackages - remaining;
		}
		else {
		
			return -1;
		}
		
		return count+remaining;
	
        throw new UnsupportedOperationException("Waiting to be implemented.");
    }
    public static void main(String[] args) {
        System.out.println(minimalNumberOfPackages(16, 2, 10));
    }
}
